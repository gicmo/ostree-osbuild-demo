#!/usr/bin/python3

import argparse
import configparser
import json
import os
import sys
import tempfile
import urllib.request
import yaml

import dnf
import dnf.conf
import dnf.conf.read
import hawkey


RESET = "\033[0m"
BOLD = "\033[1m"
RED = "\033[31m"


SELINUX_FILE_CONTEXTS = "etc/selinux/targeted/contexts/files/file_contexts"


class DepSolver:
    def __init__(self, arch, relver, dirs):
        self.base = dnf.Base()
        self.arch = arch
        self.basearch = dnf.rpm.basearch(arch)
        conf = self.base.conf
        conf.config_file_path = "/dev/null"
        conf.persistdir = dirs["persistdir"]
        conf.cachedir = dirs["cachedir"]
        conf.substitutions["arch"] = arch
        conf.substitutions["basearch"] = self.basearch
        conf.substitutions["releasever"] = relver
        conf.reposdir = [dirs["repodir"]]
        self.repos = self.read_repos()

    def read_repos(self):
        conf = self.base.conf
        reader = dnf.conf.read.RepoReader(conf, {})
        return {r.id: r for r in reader}

    def resolve(self, manifest):

        base = self.base
        base.reset(goal=True, repos=True, sack=True)

        gpgkeys = []

        for repo_id in manifest["repos"]:
            if repo_id not in self.repos:
                raise ValueError("fUnknown repo: {repo_id}")
            repo = self.repos[repo_id]
            base.repos.add(repo)
            for key in repo.gpgkey:
                with urllib.request.urlopen(key) as r:
                    gpgkeys.append(r.read().decode("utf-8"))

        base.fill_sack(load_system_repo=False)

        include = manifest["packages"]
        include += manifest.get(f"packages-{self.basearch}", [])
        exclude = manifest.get("packages-exclude", [])

        base.install_specs(include, exclude=exclude)
        base.resolve()

        deps = []
        for tsi in base.transaction:
            # avoid using the install_set() helper, as it does not guarantee a stable order
            if tsi.action not in dnf.transaction.FORWARD_ACTIONS:
                continue
            package = tsi.pkg

            checksum_id = hawkey.chksum_name(package.chksum[0])
            checksum = package.chksum[1].hex()
            deps.append({
                "name": package.name,
                "epoch": package.epoch,
                "version": package.version,
                "release": package.release,
                "arch": package.arch,
                "repo_id": package.reponame,
                "path": package.relativepath,
                "remote_location": package.remote_location(),
                "checksum": f"{checksum_id}:{checksum}",
            })

        ret = {
            "dependencies": deps,
            "gpgkeys": gpgkeys
        }
        return ret


def gen_rpm_stage_data(data):
    checksums = []
    urls = {}
    for pkg in data["dependencies"]:
        checksum = pkg["checksum"]
        checksums.append(checksum)
        urls[checksum] = pkg["remote_location"]

    return urls, checksums


def find_stage(manifest, name, ensure_options=True):
    pipeline = manifest["pipeline"]
    for stage in pipeline["stages"]:
        if stage["name"] == name:
            if "options" not in stage and ensure_options:
                stage["options"] = {}
            return stage
    return None


def manifest_update_packages(manifest, pkgs):
    urls, checksums = gen_rpm_stage_data(pkgs)

    sources = manifest["sources"]
    sources["org.osbuild.files"]["urls"].update(urls)

    rpmstage = find_stage(manifest, "org.osbuild.rpm")
    if not rpmstage:
        raise RuntimeError("Failed to find rpm stage")

    rpmstage["options"]["gpgkeys"] = pkgs["gpgkeys"]
    rpmstage["options"]["packages"] = checksums


def manifest_add_build_pipeline(manifest, builder, relver):
    pipeline = builder["pipeline"]
    runner = f"org.osbuild.fedora{relver}"
    urls = builder["sources"]["org.osbuild.files"]["urls"]

    manifest["pipeline"]["build"]["pipeline"] = pipeline
    manifest["pipeline"]["build"]["runner"] = runner
    manifest["sources"]["org.osbuild.files"]["urls"].update(urls)


def prepare_build_manifest(config, solver):
    print("Preparing the build pipeline manifest:")

    manifest = {
        "pipeline": {
            "stages": [
                {
                    "name": "org.osbuild.rpm",
                    "options": {}
                },
                {
                    "name": "org.osbuild.selinux",
                    "options": {
                        "file_contexts": SELINUX_FILE_CONTEXTS
                    }
                }
            ]
        },
        "runner": None,
        "sources": {
            "org.osbuild.files": {
                "urls": {}
            }
        },
    }

    arch = solver.arch
    treefile = config.get(f"buildroot-{arch}", "tree_file")
    with open(treefile) as f:
        treespec = yaml.safe_load(f)

    print("  Generating package list and sources")
    pkgs = solver.resolve(treespec)
    manifest_update_packages(manifest, pkgs)

    return manifest


def prepare_commit_manifest(config, treespec, solver):
    print("Preparing the commit manifest:")

    arch = solver.arch
    section = f"commit-{arch}"

    templatefile = config.get(section, "template")
    with open(templatefile, "r") as fp:
        manifest = json.load(fp)

    old = manifest["sources"]["org.osbuild.files"]["urls"]
    new = {}
    for stage in manifest["pipeline"]["stages"]:
        if stage["name"] != "org.osbuild.copy":
            continue
        options = stage.get("options", {})
        source = options.get("source", {})
        if source.get("type", "") != "archive":
            continue
        checksum = source["checksum"]
        new[checksum] = old[checksum]

    manifest["sources"]["org.osbuild.files"]["urls"] = new
    print("  Generating package list and sources")
    pkgs = solver.resolve(treespec)
    manifest_update_packages(manifest, pkgs)

    ref = treespec.get("ref")
    if ref:
        assembler = manifest["pipeline"]["assembler"]
        assert assembler["name"] == "org.osbuild.ostree.commit"
        assembler["options"]["ref"] = ref

    units = treespec.get("units")
    if units:
        systemd = find_stage(manifest, "org.osbuild.systemd")
        systemd["options"]["enabled_services"] = units

    target = treespec.get("default_target") or treespec.get("default-target")
    if target:
        systemd = find_stage(manifest, "org.osbuild.systemd")
        systemd["options"]["default_target"] = target

    groups = treespec.get("etc-group-members")
    if groups:
        rpmostree = find_stage(manifest, "org.osbuild.rpm-ostree")
        rpmostree["options"]["etc_group_members"] = groups

    return manifest


def prepare_image_manifest(config, treespec, arch, solver):
    section = f"image-{arch}"

    templatefile = config.get(section, "template")
    with open(templatefile, "r") as fp:
        manifest = json.load(fp)

    if "org.osbuild.files" in manifest["sources"]:
        manifest["sources"]["org.osbuild.files"]["urls"] = {}

    if find_stage(manifest, "org.osbuild.rpm"):
        pkgs = solver.resolve(treespec)
        manifest_update_packages(manifest, pkgs)

    ref = treespec.get("ref")
    prefix = ""
    if ref:
        ostreestage = find_stage(manifest, "org.osbuild.ostree")
        existing = ostreestage["options"].get("ref", "")
        if ":" in existing:
            remote, existing = existing.split(":", 1)
            prefix = remote + ":"
        ostreestage["options"]["ref"] = f"{prefix}{ref}"

    ignition_network = treespec.get("ignition-network-kcmdline")
    if ignition_network:
        ignition = find_stage(manifest, "org.osbuild.ignition")
        ignition["options"]["network"] = ignition_network

    return manifest


def main():
    parser = argparse.ArgumentParser(description="configure manifests")
    parser.add_argument("--config", metavar="FILE", type=os.path.abspath,
                        default="config.ini", dest="config",
                        help="Build configuration")
    parser.add_argument("--build-dir", metavar="DIR", type=os.path.abspath,
                        default="build", dest="builddir",
                        help="temporary directory to store build data")
    args = parser.parse_args()

    builddir = args.builddir
    os.makedirs(builddir, exist_ok=True)
    uid = int(os.getenv("SUDO_UID", os.getuid()))
    os.chown(builddir, uid, os.getgid())

    config = configparser.ConfigParser()
    print(f"Using {BOLD}{args.config}{RESET}")
    config.read(args.config)

    arch = config.get("DEFAULT", "arch")
    relver = config.get("DEFAULT", "release")
    tree_file = config.get("DEFAULT", "tree_file")

    print(f"  - {BOLD}{tree_file}{RESET} rel: {relver}, arch: {arch}")

    with open(tree_file, "r") as f:
        treespec = yaml.unsafe_load(f)

    with tempfile.TemporaryDirectory() as persistdir:
        dirs = {
            "repodir": os.path.curdir,
            "cachedir": os.path.join(builddir, "dnf-cache"),
            "persistdir": persistdir
        }

        solver = DepSolver(arch, str(relver), dirs)

        builder = prepare_build_manifest(config, solver)

        if f"commit-{arch}" in config:
            commit = prepare_commit_manifest(config, treespec, solver)
            manifest_add_build_pipeline(commit, builder, relver)

            dest = config.get(f"commit-{arch}", "manifest")
            with open(dest, "w") as f:
                json.dump(commit, f, indent=2)

        if f"image-{arch}" in config:
            image = prepare_image_manifest(config, treespec, arch, solver)
            manifest_add_build_pipeline(image, builder, relver)

            dest = config.get(f"image-{arch}", "manifest")
            with open(dest, "w") as f:
                json.dump(image, f, indent=2)


if __name__ == "__main__":
    sys.exit(main())
