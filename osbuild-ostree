#!/usr/bin/python3

import argparse
import configparser
import contextlib
import json
import os
import platform
import subprocess
import sys
import time

# Hack to ensure with have the osbuild package available
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)),
                                "osbuild"))
import osbuild  #pylint: disable=wrong-import-position
from osbuild.main_cli import mark_checkpoints #pylint: disable=wrong-import-position


RESET = "\033[0m"
GREEN = "\033[32m"
BOLD = "\033[1m"
RED = "\033[31m"


class Build:
    def __init__(self, env, target, manifest, path=None):
        self.env = env
        self.target = target
        self.manifest = manifest
        self._pipeline = None
        self.path = path
        self.result = None

        if path:
            info = self.read_info()
        else:
            info = {"target": target}
            if self.target == "commit":
                info["ostree"] = {}

        self.info = info

    @property
    def exists(self):
        return os.path.exists(self.path)

    def load_pipeline(self):
        manifest = self.manifest
        sources = manifest.get("sources", {})
        pipeline = manifest["pipeline"]
        return osbuild.load(pipeline, sources)

    def read_info(self):
        with self.open("info.json", mode='r') as f:
            info = json.load(f)
        return info

    def write_info(self):
        with self.open("info.json", mode='w') as f:
            json.dump(self.info, f)

    def write_manifest(self):
        with self.open("manifest.json", mode="w+") as f:
            json.dump(self.manifest, f, indent=2)

    def write_result(self):
        with self.open("result.json", mode='w') as f:
            json.dump(self.result, f)

    @contextlib.contextmanager
    def open(self, *path, mode='r'):
        full_path = os.path.join(self.path, *path)
        f = open(full_path, mode)
        try:
            yield f
        finally:
            f.close()

    def build_path(self, pipeline):
        root = self.env.buildsroot
        target = self.target
        output_id = pipeline.output_id
        return os.path.join(root, target, output_id)

    def begin(self):
        pipeline = self.load_pipeline()
        self.env.mark_checkpoints(pipeline)
        self._pipeline = pipeline
        self.path = self.build_path(self._pipeline)
        os.makedirs(self.path, exist_ok=True)

        self.write_manifest()
        self.info["start"] = time.time()
        return pipeline

    def finish(self, res=None):
        self.info["stop"] = time.time()
        self.write_info()
        if res:
            self.result = res
            self.write_result()
        return self.info["stop"] - self.info["start"]


class BuildEnv:
    def __init__(self, args):
        self.args = args
        self.builddir = args.builddir
        self._info = None
        self._store = None

        self.config = configparser.ConfigParser()
        with open(args.config, "r", encoding="utf-8") as f:
            self.config.read_file(f, source=args.config)

        name = self.config.get("DEFAULT", "name")
        nick = self.config.get("DEFAULT", "nick", fallback=name)

        self.variant = {"name": name, "nick": nick}
        buildsroot = os.path.join(self.builddir, "builds", nick)
        self.buildsroot = buildsroot

    def init(self):
        builddir = self.builddir
        os.makedirs(builddir, exist_ok=True)
        uid = int(os.getenv("SUDO_UID", os.getuid()))
        os.chown(builddir, uid, os.getgid())
        os.makedirs(self.buildsroot, exist_ok=True)
        os.chown(self.buildsroot, uid, os.getgid())
        return self.builddir

    @property
    def arch(self):
        cpu = platform.processor()
        return self.config.get("DEFAULT", "arch", fallback=cpu)

    @property
    def targets(self):
        targets = []

        if f"commit-{self.arch}" in self.config:
            targets += ["commit", "sign"]

        if f"image-{self.arch}" in self.config:
            targets += ["image"]

        return targets

    def load_manifest(self, name):
        section = f"{name}-{self.arch}"
        path = self.config.get(section, "manifest")
        with open(path, "r") as f:
            return json.load(f)

    @property
    def info(self):
        if not self._info:
            self._info = self.read_info()
        return self._info

    @property
    def store(self):
        if not self._store:
            self.init()
            path = f"{self.builddir}/store"
            self._store = osbuild.objectstore.ObjectStore(path)
        return self._store

    def read_info(self):
        try:
            with self.open("info.json", mode='r') as f:
                info = json.load(f)
        except (FileNotFoundError, json.decoder.JSONDecodeError):
            info = {'ostree': {}}
        return info

    def mark_checkpoints(self, pipeline: osbuild.Pipeline):
        checkpoints = self.args.checkpoint
        if not checkpoints:
            return

        missed = mark_checkpoints(pipeline, checkpoints)
        if missed:
            for checkpoint in missed:
                print(f"{BOLD}{RED}WARNING:{RESET}", end="")
                print(f" Checkpoint {BOLD}{checkpoint}{RESET} not found!")

    @contextlib.contextmanager
    def open(self, *path, mode='r'):
        full_path = os.path.join(self.builddir, *path)
        f = open(full_path, mode)
        try:
            yield f
        finally:
            f.close()

    def prepare_build(self, target):
        manifest = self.load_manifest(target)
        build = Build(self, target, manifest)
        return build

    def load_build(self, target):
        builds = self.list_builds(target)

        if not builds:
            raise ValueError(f"No builds for {target}")

        buildpath = builds[-1].path  # the oldest one
        path = os.path.join(buildpath, "manifest.json")
        with self.open(path, mode="r") as f:
            manifest = json.load(f)
        build = Build(self, target, manifest, buildpath)
        return build

    def list_builds(self, target):
        with os.scandir(os.path.join(self.buildsroot, target)) as entries:
            entries = list(entries)
        visible = filter(lambda e: not e.name.startswith('.'), entries)
        dirs = filter(lambda e: e.is_dir(follow_symlinks=False), visible)
        builds = sorted(dirs, key=lambda e: e.stat().st_mtime)
        return builds


def genisoimage(outdir, datdir):
    args = [
        "genisoimage",
        "-input-charset", "utf-8",
        "-output", f"{outdir}/cloudinit.iso",
        "-volid", "cidata",
        "-joliet",
        "-rock",
        "-quiet",
        f"{datdir}/user-data",
        f"{datdir}/meta-data"]

    subprocess.run(args, check=True)


def boot_cmd(env):
    builddir = env.builddir

    build = env.load_build("image")

    image_name = build.info["image"]["name"]
    path = os.path.join(build.path, image_name)

    print(f"Image at {path}")

    datadir = os.path.abspath("cloud-init")
    genisoimage(builddir, datadir)

    ovmfcode = "/usr/share/OVMF/OVMF_CODE.fd"

    portfwd = {
        2222:22,
        9091:9091
    }

    fwds = [f"hostfwd=tcp::{h}-:{g}" for h, g in portfwd.items()]

    # create a new mac address based on our machine id
    with open("/etc/machine-id", "r") as f:
        data = f.read().strip()


    maclst = ["FE"] + [data[x:x+2] for x in range(-12, -2, 2)]
    macstr = ":".join(maclst)

    print(f"MAC: {BOLD}{macstr}{RESET}")

    argv = ['qemu-system-x86_64',
            "-m", "2048",
            "-drive",
            f"file={ovmfcode},if=pflash,format=raw,unit=0,readonly=on",
            '-enable-kvm',
            f"-cdrom", f"{builddir}/cloudinit.iso",
            "-device", f"virtio-net-pci,netdev=n0,mac={macstr}",
            "-netdev", "user,id=n0,net=10.0.2.0/24," + ",".join(fwds),
            f"-fw_cfg", "name=opt/com.coreos/config,file=default.ign",
            path]

    if not env.args.persist:
        argv.append("-snapshot")

    r = subprocess.run(argv, check=False)
    return r.returncode


class BuildError(Exception):
    pass


def store_status(store, object_id):
    if not store:
        return ""

    if not store.contains(object_id):
        return ""

    return " stored"


def print_pipeline(pipeline, store, level=0):
    indent = "  "*level

    if pipeline.build:
        print(f"{indent}build:")
        print_pipeline(pipeline.build, store, level=level+1)

    runner = pipeline.runner
    if runner:
        print(f"{indent}runner:")
        print(f"{indent}  {runner}")

    if pipeline.stages:
        print(f"{indent}stages:")
    for stage in pipeline.stages:
        status = store_status(store, stage.id)
        if stage.checkpoint:
            status += " checkpoint"
        print(f"{indent}  {stage.name:25} \t{stage.id}{status}")

    asm = pipeline.assembler
    if asm:
        status = store_status(store, asm.id)
        if asm.checkpoint:
            status += " checkpoint"
        print(f"{indent}assembler:")
        print(f"{indent}  {asm.name:25} \t{asm.id}{status}")


def print_pipeline_done(name, items):
    print("")
    print(f"Pipeline for {BOLD}{name}{RESET} is", end=" ")
    print(f"{GREEN}done{RESET}")

    maxlen = max(len(k) for k in items) + 2
    for k in items:
        print(f"{k:>{maxlen}}: {items[k]}")


def find_osbuild_module():
    this_file = os.path.dirname(os.path.abspath(__file__))
    return os.path.join(this_file, "osbuild")


def load_pipeline(manifest):
    sources = manifest.get("sources", {})
    pipeline = manifest["pipeline"]
    pipeline = osbuild.load(pipeline, sources)
    return pipeline


def build_pipeline(pipeline, store, outdir):
    print("Building the following pipeline:")

    print("")
    stages = pipeline.stages
    if pipeline.build:
        stage = pipeline.build.stages[-1]
        print(f"checkpointing build pipeline: {stage.id}")
        stage.checkpoint = True

    for stage in stages:
        if stage.name == "org.osbuild.rpm":
            print(f"checkpointing rpm stage: {stage.id}")
            stage.checkpoint = True

    print("")
    print(f"{BOLD}pipeline{RESET}:")
    print_pipeline(pipeline, store)

    libdir = find_osbuild_module()

    monitor = osbuild.monitor.LogMonitor(sys.stdout.fileno())
    r = pipeline.run(store.store,
                     monitor=monitor,
                     libdir=libdir,
                     output_directory=outdir)

    if not r["success"]:
        raise BuildError

    return r


def manifest_needs_commit(manifest):
    for stage in manifest["pipeline"]["stages"]:
        options = stage.get("options")
        if stage["name"] in ["org.osbuild.selinux"]:
            options = options.get("ostree", {})

        if not options or "commit" not in options:
            continue

        if not options["commit"]:
            return True
    return False


def sign_commit(env: BuildEnv):
    build = env.load_build("commit")

    builddir = env.builddir

    output_id = build.info["ostree"]["output_id"]
    commit_id = build.info["ostree"]["commit_id"]
    repo = os.path.join(build.path, "repo")
    data = {
        "builddir": builddir,
        "repo": repo,
        "output_id": output_id,
        "commit_id": commit_id,
    }

    print("")
    print(f"{BOLD}Signing commit:{RESET}")

    this_path = os.path.dirname(os.path.abspath(__file__))
    r = subprocess.run([f"{this_path}/sign-commit"],
                       encoding="utf-8",
                       input=json.dumps(data),
                       stdout=subprocess.PIPE,
                       check=False)

    if r.returncode != 0:
        raise RuntimeError("Failed to sign commit")

    print("")
    res = json.loads(r.stdout)

    build.info["ostree"]["gpg"] = res
    build.write_info()


def prepare_sources(manifest, commit):
    commit_id = commit.info["ostree"]["commit_id"]
    gpg = commit.info["ostree"]["gpg"]

    url = "file://" + os.path.join(commit.path, "repo")
    sources = manifest["sources"]

    sources["org.osbuild.ostree"] = {
        "commits": {
            commit_id: {
                "remote": {
                    "uid": commit_id,
                    "url": url,
                    **gpg
                }
            }
        }
    }


def prepare_image_pipeline(manifest, commit):
    commit_id = commit.info["ostree"]["commit_id"]
    for stage in manifest["pipeline"]["stages"]:
        options = stage.get("options")
        if stage["name"] in ["org.osbuild.selinux"]:
            options = options.get("ostree", {})

        if not options or "commit" not in options:
            continue
        options["commit"] = commit_id


def build_commit(env: BuildEnv):
    store = env.store
    build = env.prepare_build("commit")

    print(f"{BOLD}Building the ostree commit:{RESET}")

    pipeline = build.begin()

    res = build_pipeline(pipeline, store, build.path)

    taropts = pipeline.assembler.options.get("tar")
    if taropts:
        print("Decompressing commit tarball")
        filename = taropts["filename"]
        command = [
            "tar",
            "-x",
            "--auto-compress",
            "-f", os.path.join(build.path, filename),
            "-C", build.path
        ]
        subprocess.run(command,
                       stdout=sys.stderr,
                       check=True)

    with open(f"{build.path}/compose.json") as fp:
        commit_meta = json.load(fp)
        commit_id = commit_meta["ostree-commit"]
        ref = commit_meta["ref"]

    output_id = pipeline.output_id

    print_pipeline_done("ostree commit", {
        "ref": ref,
        "output id": output_id,
        "commit id": commit_id
    })

    build.info["ostree"].update({
        "output_id": output_id,
        "commit_id": commit_id,
        "ref": ref,
    })

    build.finish(res)


def build_image(env: BuildEnv):
    store = env.store

    print(f"{BOLD}Building the image{RESET}")

    build = env.prepare_build("image")
    manifest = build.manifest

    if manifest_needs_commit(manifest):
        commit = env.load_build("commit")
        prepare_image_pipeline(manifest, commit)
        prepare_sources(manifest, commit)
        build.info["ostree"] = commit.info["ostree"]

    pipeline = build.begin()

    build_pipeline(pipeline, store, build.path)

    output_id = pipeline.output_id
    image_name = pipeline.assembler.options["filename"]

    print_pipeline_done("image", {
        "output id": output_id,
        "image": image_name
    })

    image_relpath = os.path.relpath(build.path, os.path.curdir)
    print("")
    print("Image ready at:")
    print(f"  {image_relpath}/{image_name}")

    build.info["image"] = {
        "output_id": output_id,
        "name": image_name,
    }

    build.finish()


def build_cmd(env):
    target = env.args.target or env.targets

    try:
        if 'commit' in target:
            build_commit(env)

        if 'sign' in target:
            sign_commit(env)

        if 'image' in target:
            build_image(env)

    except KeyboardInterrupt:
        print()
        print(f"{RESET}{BOLD}{RED}Aborted{RESET}")
        return 130
    except BuildError:
        print()
        print(f"{RESET}{BOLD}{RED}Failed{RESET}")
        return 1
    return 0


def clean_cmd(env):
    targets = env.args.target or ['all']
    builddir = env.builddir
    paths = []
    for t in targets:
        if t == "all":
            paths = [builddir]
            break

        if t == "dnf":
            paths += [f"{builddir}/dnf-cache"]
        elif t == "store":
            paths += [f"{builddir}/store"]
        elif t == "objects":
            paths += [f"{builddir}/store/tmp"]
            paths += [f"{builddir}/store/refs"]
            paths += [f"{builddir}/store/objects"]
        elif t == "builds":

            paths += [env.buildsroot]
        else:
            ValueError("unknown clean target")

    print(f"About to clean up:")
    print("  -", "\n  - ".join(paths))
    try:
        s = input("Type 'Y' to confirm: ")
    except (EOFError, KeyboardInterrupt):
        return 1
    if s != 'Y':
        return 1

    for path in paths:
        #pylint: disable=no-member
        osbuild.util.rmrf.rmtree(path)

    return 0


def main():
    parser = argparse.ArgumentParser(description="osbuild ostree demo")
    parser.add_argument("--build-dir", metavar="DIR", type=os.path.abspath,
                        default="build", dest="builddir",
                        help="temporary directory to store build data")
    parser.add_argument("--config", metavar="FILE", type=os.path.abspath,
                        default="config.ini", dest="config",
                        help="Build configuration")
    parser.set_defaults(cmd=None)
    sp = parser.add_subparsers(help='commands')

    subpar = sp.add_parser("build", help='build commit or image')
    subpar.add_argument("--checkpoint", metavar="ID", action="append", type=str, default=None,
                        help="object to commit to the store during build (can be passed multiple times)")
    subpar.add_argument("--commit", dest='target', action='append_const', const="commit",
                        help='build the commit')
    subpar.add_argument("--sign", dest='target', action='append_const', const="sign",
                        help='sign the commit')
    subpar.add_argument("--image", dest='target', action='append_const', const="image",
                        help='build the image')
    subpar.set_defaults(cmd='build')

    subpar = sp.add_parser("clean", help='cleanup the build dir')
    subpar.add_argument("--all", dest='target', action='append_const', const="all",
                        help='remove everything in the build dir')
    subpar.add_argument("--dnf", dest='target', action='append_const', const="dnf",
                        help='remove the dnf cache')
    subpar.add_argument("--store", dest='target', action='append_const', const="store",
                        help='remove the osbuild store')
    subpar.add_argument("--objects", dest='target', action='append_const', const="objects",
                        help='remove the osbuild store objects')
    subpar.add_argument("--builds", dest='target', action='append_const', const="builds",
                        help='remove the all builds')
    subpar.set_defaults(cmd='clean')

    subpar = sp.add_parser("boot", help='boot the final image')
    subpar.add_argument("--persist", action='store_true', default=False,
                        help='make changes persistent')
    subpar.set_defaults(cmd='boot')

    args = parser.parse_args()

    if not args.cmd:
        print(f"{RED}Error{RESET}: Need command\n")
        parser.print_help(sys.stderr)
        return 1

    env = BuildEnv(args)

    if args.cmd == "build":
        return build_cmd(env)
    if args.cmd == "clean":
        return clean_cmd(env)
    if args.cmd == "boot":
        return boot_cmd(env)
    return 1


if __name__ == "__main__":
    sys.exit(main())
