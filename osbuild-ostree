#!/usr/bin/python3

import argparse
import configparser
import contextlib
import json
import os
import platform
import subprocess
import shutil
import sys

# Hack to ensure with have the osbuild package available
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)),
                                "osbuild"))
import osbuild  #pylint: disable=wrong-import-position


RESET = "\033[0m"
BOLD = "\033[1m"
RED = "\033[31m"


class BuildEnv:
    def __init__(self, args):
        self.args = args
        self.builddir = args.builddir
        self._info = None
        self._store = None

        self.config = configparser.ConfigParser()
        if os.path.isfile(args.config):
            self.config.read(args.config)

    def init(self):
        builddir = self.builddir
        os.makedirs(builddir, exist_ok=True)
        uid = int(os.getenv("SUDO_UID", os.getuid()))
        os.chown(builddir, uid, os.getgid())
        return self.builddir

    @property
    def arch(self):
        cpu = platform.processor()
        return self.config.get("DEFAULT", "arch", fallback=cpu)

    def load_manifest(self, name):
        section = f"{name}-{self.arch}"
        path = self.config.get(section, "manifest")
        with open(path, "r") as f:
            return json.load(f)

    @property
    def info(self):
        if not self._info:
            self._info = self.read_info()
        return self._info

    @property
    def store(self):
        if not self._store:
            self.init()
            path = f"{self.builddir}/store"
            self._store = osbuild.objectstore.ObjectStore(path)
        return self._store

    def read_info(self):
        try:
            with self.open("info.json", mode='r') as f:
                info = json.load(f)
        except (FileNotFoundError, json.decoder.JSONDecodeError):
            info = {'ostree': {}}
        return info

    def write_info(self):
        with self.open("info.json", mode='w') as f:
            json.dump(self.info, f)

    def write_manifest(self, manifest, name):
        with self.open(f"{name}-manifest.json", mode="w+") as f:
            json.dump(manifest, f, indent=2)

    @contextlib.contextmanager
    def open(self, *path, mode='r'):
        full_path = os.path.join(self.builddir, *path)
        f = open(full_path, mode)
        try:
            yield f
        finally:
            f.close()


def genisoimage(outdir, datdir):
    args = [
        "genisoimage",
        "-input-charset", "utf-8",
        "-output", f"{outdir}/cloudinit.iso",
        "-volid", "cidata",
        "-joliet",
        "-rock",
        "-quiet",
        f"{datdir}/user-data",
        f"{datdir}/meta-data"]

    subprocess.run(args, check=True)


def boot(env):
    builddir, info = env.builddir, env.info

    output_id = info["image"]["output_id"]
    image_name = info["image"]["name"]
    path = f"{builddir}/store/refs/{output_id}/{image_name}"
    print(f"Image at {path}")

    datadir = os.path.abspath("cloud-init")
    genisoimage(builddir, datadir)

    ovmfcode = "/usr/share/OVMF/OVMF_CODE.fd"

    argv = ['qemu-system-x86_64',
            "-m", "2048",
            "-drive",
            f"file={ovmfcode},if=pflash,format=raw,unit=0,readonly=on",
            '-enable-kvm',
            f"-cdrom", f"{builddir}/cloudinit.iso",
            "-net", "nic,model=virtio",
            "-net", "user,hostfwd=tcp::2222-:22,hostfwd=tcp::9091-:9090",
            path]

    if not env.args.persist:
        argv.append("-snapshot")

    r = subprocess.run(argv, check=False)
    return r.returncode


class BuildError(Exception):
    pass

def remove_path(path):
    def fixperms(p):
        subprocess.run(["chattr", "-i", p],
                       check=False)
        os.chmod(p, 0o700)

    def unlink(p):
        try:
            os.unlink(p)
        except IsADirectoryError:
            remove_path(p)
        except FileNotFoundError:
            pass

    def on_error(_fn, p, exc_info):
        e = exc_info[0]
        if issubclass(e, FileNotFoundError):
            pass
        elif issubclass(e, PermissionError):
            if p != path:
                fixperms(os.path.dirname(p))
            fixperms(p)
            unlink(p)
        else:
            raise e

    shutil.rmtree(path, onerror=on_error)


def store_status(store, object_id):
    if not store:
        return ""

    if not store.contains(object_id):
        return ""

    return " stored"


def print_pipeline(pipeline, store, level=0):
    indent = "  "*level

    if pipeline.build:
        print(f"{indent}build:")
        print_pipeline(pipeline.build, store, level=level+1)

    runner = pipeline.runner
    if runner:
        print(f"{indent}runner:")
        print(f"{indent}  {runner}")

    if pipeline.stages:
        print(f"{indent}stages:")
    for stage in pipeline.stages:
        status = store_status(store, stage.id)
        print(f"{indent}  {stage.name}: \t{stage.id}{status}")

    asm = pipeline.assembler
    if asm:
        status = store_status(store, asm.id)
        print(f"{indent}assembler:")
        print(f"{indent}  {asm.name}: \t{asm.id}{status}")


def find_osbuild_module():
    this_file = os.path.dirname(os.path.abspath(__file__))
    return os.path.join(this_file, "osbuild")


def build_manifest(manifest, store, _env):
    sources = manifest.get("sources", {})
    pipeline = manifest["pipeline"]
    pipeline = osbuild.load(pipeline, sources)

    print("Building the following pipeline:")
    print_pipeline(pipeline, store)

    print("")
    stages = pipeline.stages
    if pipeline.build:
        stages = pipeline.build.stages + stages
    for stage in stages:
        if stage.name == "org.osbuild.rpm":
            print(f"checkpointing rpm stage: {stage.id}")
            stage.checkpoint = True

    libdir = find_osbuild_module()

    r = pipeline.run(store.store,
                     interactive=True,
                     libdir=libdir)

    if not r["success"]:
        raise BuildError

    return r, pipeline


def sign_commit(env):
    builddir, info = env.builddir, env.info
    output_id = info["ostree"]["output_id"]
    commit_id = info["ostree"]["commit_id"]
    repo = f"{builddir}/store/refs/{output_id}/repo"
    data = {
        "builddir": builddir,
        "repo": repo,
        "output_id": output_id,
        "commit_id": commit_id,
    }

    print("")
    print(f"{BOLD}Signing commit:{RESET}")

    this_path = os.path.dirname(os.path.abspath(__file__))
    r = subprocess.run([f"{this_path}/sign-commit"],
                       encoding="utf-8",
                       input=json.dumps(data),
                       stdout=subprocess.PIPE,
                       check=False)

    if r.returncode != 0:
        raise RuntimeError("Failed to sign commit")

    print("")
    res = json.loads(r.stdout)

    info["ostree"]["gpg"] = res
    env.write_info()


def prepare_sources(manifest, store, output_id, commit_id, gpg):
    obj = store.resolve_ref(output_id)
    url = "file://" + os.path.join(obj, "repo")
    sources = manifest["sources"]

    sources["org.osbuild.ostree"] = {
        "commits": {
            commit_id: {
                "remote": {
                    "uid": commit_id,
                    "url": url,
                    **gpg
                }
            }
        }
    }


def prepare_image_pipeline(manifest, commit_id):
    for stage in manifest["pipeline"]["stages"]:
        options = stage.get("options")
        if stage["name"] in ["org.osbuild.selinux"]:
            options = options.get("ostree", {})

        if not options or "commit" not in options:
            continue
        options["commit"] = commit_id


def build_commit(env):
    info, store = env.info, env.store
    manifest = env.load_manifest("commit")
    env.write_manifest(manifest, "commit")

    print(f"{BOLD}Building the ostree commit:{RESET}")

    _, pipeline = build_manifest(manifest, store, env)

    output_id = pipeline.output_id

    obj = store.resolve_ref(output_id)
    with open(f"{obj}/compose.json") as fp:
        commit_meta = json.load(fp)
        commit_id = commit_meta["ostree-commit"]

    print("")
    print("Pipeline for ostree commit is done:")
    print("  output id:", output_id)
    print("  commit id:", commit_id)

    info["ostree"].update({
        "output_id": output_id,
        "commit_id": commit_id
    })

    env.write_info()


def build_image(env):
    info, store = env.info, env.store
    commit_id = info["ostree"]["commit_id"]
    output_id = info["ostree"]["output_id"]
    gpg = info["ostree"]["gpg"]

    print(f"{BOLD}Building the image{RESET}")

    manifest = env.load_manifest("image")
    prepare_image_pipeline(manifest, commit_id)
    prepare_sources(manifest, store, output_id, commit_id, gpg)

    env.write_manifest(manifest, "image")

    _, pipeline = build_manifest(manifest, store, env)

    output_id = pipeline.output_id
    image_name = pipeline.assembler.options["filename"]

    print("")
    print("Pipeline for ostree image is done:")
    print("  output id:", output_id)
    print("      image:", image_name)

    image_abspath = store.resolve_ref(output_id)
    image_relpath = os.path.relpath(image_abspath, os.path.curdir)
    print("")
    print("Image ready at:")
    print(f"  {image_relpath}")

    info["image"] = {
        "output_id": output_id,
        "name": image_name,
    }

    env.write_info()


def build(env):
    target = env.args.target or ['commit', 'sign', 'image']

    try:
        if 'commit' in target:
            build_commit(env)

        if 'sign' in target:
            sign_commit(env)

        if 'image' in target:
            build_image(env)

    except KeyboardInterrupt:
        print()
        print(f"{RESET}{BOLD}{RED}Aborted{RESET}")
        return 130
    except BuildError:
        print()
        print(f"{RESET}{BOLD}{RED}Failed{RESET}")
        return 1
    return 0


def clean(env):
    path = env.builddir
    print(f"About to clean up {path}.")
    try:
        s = input("Type 'Y' to confirm: ")
    except (EOFError, KeyboardInterrupt):
        return 1
    if s != 'Y':
        return 1
    remove_path(path)
    return 0


def main():
    parser = argparse.ArgumentParser(description="osbuild ostree demo")
    parser.add_argument("--build-dir", metavar="DIR", type=os.path.abspath,
                        default="build", dest="builddir",
                        help="temporary directory to store build data")
    parser.add_argument("--config", metavar="FILE", type=os.path.abspath,
                        default="config.ini", dest="config",
                        help="Build configuration")
    parser.set_defaults(cmd=None)
    sp = parser.add_subparsers(help='commands')

    subpar = sp.add_parser("build", help='build commit or image')
    subpar.add_argument("--commit", dest='target', action='append_const', const="commit",
                        help='build the commit')
    subpar.add_argument("--sign", dest='target', action='append_const', const="sign",
                        help='sign the commit')
    subpar.add_argument("--image", dest='target', action='append_const', const="image",
                        help='build the image')
    subpar.set_defaults(cmd='build')

    subpar = sp.add_parser("clean", help='cleanup the build dir')
    subpar.set_defaults(cmd='clean')

    subpar = sp.add_parser("boot", help='boot the final image')
    subpar.add_argument("--persist", action='store_true', default=False,
                        help='make changes persistent')
    subpar.set_defaults(cmd='boot')

    args = parser.parse_args()

    if not args.cmd:
        print(f"{RED}Error{RESET}: Need command\n")
        parser.print_help(sys.stderr)
        return 1

    env = BuildEnv(args)

    if args.cmd == "build":
        return build(env)
    if args.cmd == "clean":
        return clean(env)
    if args.cmd == "boot":
        return boot(env)
    return 1


if __name__ == "__main__":
    sys.exit(main())
