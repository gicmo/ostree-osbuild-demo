#!/usr/bin/python3

import argparse
import json
import os
import subprocess
import shutil
import sys

# Hack to ensure with have the osbuild package available
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)),
                                "osbuild"))
import osbuild


RESET = "\033[0m"
BOLD = "\033[1m"
RED = "\033[31m"


class BuildError(Exception):
    pass


def remove_path(path):
    def fixperms(p):
        subprocess.run(["chattr", "-i", p],
                       check=False)
        os.chmod(p, 0o700)

    def unlink(p):
        try:
            os.unlink(p)
        except IsADirectoryError:
            remove_path(p)
        except FileNotFoundError:
            pass

    def on_error(fn, p, exc_info):
        e = exc_info[0]
        if issubclass(e, FileNotFoundError):
            pass
        elif issubclass(e, PermissionError):
            if p != path:
                fixperms(os.path.dirname(p))
            fixperms(p)
            unlink(p)
        else:
            raise

    shutil.rmtree(path, onerror=on_error)


def store_status(store, object_id):
    if not store:
        return ""

    if not store.contains(object_id):
        return ""

    return " stored"


def print_pipeline(pipeline, store, level=0):
    indent = "  "*level

    if pipeline.build:
        print(f"{indent}build:")
        print_pipeline(pipeline.build, store, level=level+1)

    runner = pipeline.runner
    if runner:
        print(f"{indent}runner:")
        print(f"{indent}  {runner}")

    if pipeline.stages:
        print(f"{indent}stages:")
    for stage in pipeline.stages:
        status = store_status(store, stage.id)
        print(f"{indent}  {stage.name}: \t{stage.id}{status}")

    asm = pipeline.assembler
    if asm:
        status = store_status(store, asm.id)
        print(f"{indent}assembler:")
        print(f"{indent}  {asm.name}: \t{asm.id}{status}")


def find_osbuild_module():
    this_file = os.path.dirname(os.path.abspath(__file__))
    return os.path.join(this_file, "osbuild")


def build_commit(builddir, args):

    with open("f30-ostree.json", "r") as fp:
        manifest = json.load(fp)
    sources = manifest.get("sources", {})
    pipeline = manifest["pipeline"]
    pipeline = osbuild.load(pipeline, sources)

    store = osbuild.objectstore.ObjectStore(f"{builddir}/store")

    print("Building the following pipeline:")
    print_pipeline(pipeline, store)

    print("")
    for stage in pipeline.stages:
        if stage.name == "org.osbuild.dnf":
            print(f"checkpointing dnf stage: {stage.id}")
            stage.checkpoint = True

    libdir = find_osbuild_module()

    r = pipeline.run(store.store,
                     interactive=True,
                     libdir=libdir)

    if not r["success"]:
        raise BuildError

    output_id = pipeline.output_id

    obj = store.resolve_ref(output_id)
    with open(f"{obj}/compose.json") as fp:
        commit_meta = json.load(fp)
        commit_id = commit_meta["ostree-commit"]

    return output_id, commit_id


def prepare_sources(builddir, output_id, commit_id):
    store = osbuild.objectstore.ObjectStore(f"{builddir}/store")
    obj = store.resolve_ref(output_id)
    url = "file://" + os.path.join(obj, "repo")
    sources = {
        "org.osbuild.ostree": {
            "commits": {
                commit_id: {
                    "remote": {
                        "uid": commit_id,
                        "url": url
                    }
                }
            }
        }
    }

    return sources


def prepare_image_pipeline(commit_id):
    with open("f30-ostree-image.json", "r") as fp:
        manifest = json.load(fp)

    for stage in manifest["pipeline"]["stages"]:
        options = stage.get("options")
        if not options or "commit" not in options:
            continue
        options["commit"] = commit_id
    return manifest


def build_image(builddir, manifest, args):
    sources = manifest.get("sources", {})
    pipeline = manifest["pipeline"]
    pipeline = osbuild.load(pipeline, sources)

    store = osbuild.objectstore.ObjectStore(f"{builddir}/store")

    print("Building the following pipeline:")
    print_pipeline(pipeline, store)

    print("")
    for stage in pipeline.stages:
        if stage.name == "org.osbuild.dnf":
            print(f"checkpointing dnf stage: {stage.id}")
            stage.checkpoint = True

    libdir = find_osbuild_module()

    r = pipeline.run(store.store,
                     interactive=True,
                     libdir=libdir)

    if not r["success"]:
        raise BuildError

    output_id = pipeline.output_id
    image_name = pipeline.assembler.options["filename"]
    return output_id, image_name


def write_info(builddir, info):
    with open(f"{builddir}/info.json", "w+") as f:
        json.dump(info, f)


def build(args):
    builddir = os.path.abspath("build")
    os.makedirs(builddir, exist_ok=True)

    try:
        output_id, commit_id = build_commit(builddir, args)

        print("")
        print("Pipeline for ostree commit is done:")
        print("  output id:", output_id)
        print("  commit id:", commit_id)

        info = {
            "ostree": {
                "output_id": output_id,
                "commit_id": commit_id
            }
        }
        write_info(builddir, info)

        manifest = prepare_image_pipeline(commit_id)
        sources = prepare_sources(builddir, output_id, commit_id)
        manifest["sources"] = sources

        output_id, image_name = build_image(builddir, manifest, args)
        print("")
        print("Pipeline for ostree image is done:")
        print("  output id:", output_id)
        print("      image:", image_name)

        print("")
        print("Image ready at:")
        print(f"  {builddir}/store/refs/{output_id}/{image_name}")

        info["image"] = {
            "output_id": output_id,
            "name": image_name,
        }
        write_info(builddir, info)

    except KeyboardInterrupt:
        print()
        print(f"{RESET}{BOLD}{RED}Aborted{RESET}")
        return 130
    except BuildError:
        print()
        print(f"{RESET}{BOLD}{RED}Failed{RESET}")
        return 1


def main():
    parser = argparse.ArgumentParser(description="osbuild ostree demo")
    parser.set_defaults(cmd=None)
    sp = parser.add_subparsers(help='commands')

    subpar = sp.add_parser("build", help='build the image')
    subpar.set_defaults(cmd='build')

    args = parser.parse_args()

    if not args.cmd:
        print(f"{RED}Error{RESET}: Need command\n")
        parser.print_help(sys.stderr)
        return 1

    if args.cmd == "build":
        return build(args)


if __name__ == "__main__":
    sys.exit(main())
