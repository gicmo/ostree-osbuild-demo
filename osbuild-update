#!/usr/bin/python3

import argparse
import configparser
import json
import os
import subprocess
import sys


RESET = "\033[0m"
BOLD = "\033[1m"
RED = "\033[31m"


def ostree(*args, _input=None, _stdout=None, **kwargs):
    args = list(args) + [f'--{k}={v}' for k, v in kwargs.items()]

    if _stdout is None:
        _stdout = subprocess.PIPE

    r = subprocess.run(["ostree"] + args,
                       encoding="utf-8",
                       stdout=_stdout,
                       input=_input,
                       check=True)
    return r


def find_stage(pipeline, name):
    for stage in pipeline["stages"]:
        if stage["name"] == name:
            return stage

    raise ValueError(f"stage {name} not found")


def find_remote(remotes, name):
    for i, r in enumerate(remotes):
        if r["name"] == name:
            return i, r

    return None, None


def buildenv_from_args(args):
    builddir = args.builddir
    config = configparser.ConfigParser()
    config.read(args.config)
    return builddir, config


def find_build(builddir, config):
    name = config.get("DEFAULT", "name")
    nick = config.get("DEFAULT", "nick", fallback=name)

    buildsroot = os.path.join(builddir, "builds", nick)

    with os.scandir(os.path.join(buildsroot, "commit")) as entries:
        entries = list(entries)

    visible = filter(lambda e: not e.name.startswith('.'), entries)
    dirs = filter(lambda e: e.is_dir(follow_symlinks=False), visible)
    builds = sorted(dirs, key=lambda e: e.stat().st_mtime)

    if not builds:
        raise RuntimeError("No build fount")

    return builds[-1].path


def import_build(builddir, build):
    """Import a build into the canonical repository"""

    source = f"{build}/repo"
    repo = f"{builddir}/repo"

    r = ostree("refs", repo=source)
    refs = r.stdout.strip().split("\n")

    build_nick = os.path.relpath(build, f"{builddir}/builds")
    print(f"Importing build: {build_nick}")
    print(f"  {refs[0]}")

    ostree("pull-local", source, refs[0],
           repo=repo, _stdout=sys.stderr)

    ostree("summary", "--update", repo=repo)


def setup(args):
    builddir, config = buildenv_from_args(args)

    repo = f"{builddir}/repo"
    ostree("init", mode="archive-z2", repo=repo)

    arch = config.get("DEFAULT", "arch")
    dest = config.get(f"image-{arch}", "manifest")

    with open(dest, "r") as fp:
        manifest = json.load(fp)

    pipeline = manifest["pipeline"]
    ostreestage = find_stage(pipeline, "org.osbuild.ostree")

    ref = ostreestage["options"]["ref"]
    todelete = None
    if ":" in ref:
        todelete, ref = ref.split(":", 1)
    ostreestage["options"]["ref"] = f"osbuild:{ref}"

    remotes = ostreestage["options"]["remotes"]
    if todelete:
        i, _ = find_remote(remotes, todelete)
        if i is not None:
            del remotes[i]

    _, remote = find_remote(remotes, "osbuild")
    if not remote:
        remote = {"name": "osbuild"}
        ostreestage["options"]["remotes"].append(remote)

    remote["url"] = "http://10.0.2.2:8000/"

    with open(dest, "w") as fp:
        json.dump(manifest, fp, indent=2)

    print("")
    print(f"Wrote manifest at '{BOLD}{dest}{RESET}'")
    print("")
    subprocess.run(["git", "diff", "--", dest],
                   check=False)


def prepare(args):
    builddir, config = buildenv_from_args(args)

    build = find_build(builddir, config)

    with open(f"{build}/info.json", "r") as f:
        info = json.load(f)

    commit_id = info["ostree"]["commit_id"]

    source = f"{build}/repo"
    repo = f"{builddir}/repo"

    with tempfile.TemporaryFile(dir=builddir) as r:
        ostree("refs", repo=source, _stdout=r)
        r.seek(0)
        refs = r.read().decode("utf-8").strip().split("\n")

    ostree("pull-local", source, refs[0],
           repo=repo, _stdout=sys.stderr)

    ostree("summary", "--update", repo=repo)

    arch = config.get("DEFAULT", "arch")
    dest = config.get(f"commit-{arch}", "manifest")

    with open(dest, "r") as fp:
        manifest = json.load(fp)

    pipeline = manifest["pipeline"]
    assembler = pipeline["assembler"]
    if assembler["name"] != "org.osbuild.ostree.commit":
        raise ValueError(f"wrong assembler {assembler['name']}")

    assembler["options"]["parent"] = commit_id

    with open(dest, "w") as fp:
        json.dump(manifest, fp, indent=2)

    print("")
    print(f"Wrote manifest at '{BOLD}{dest}{RESET}'")
    print("")
    subprocess.run(["git", "diff", "--", dest],
                   check=False)


    return 0


def finish(args):
    builddir, config = buildenv_from_args(args)

    build = find_build(builddir, config)

    print(f"Using build: {build}")
    import_build(builddir, build)

    return 0


def serve(_args):
    print("No longer supported")
    print("Use {BOLD}./osbuild-serve{RESET} instead")
    return -1


def main():
    parser = argparse.ArgumentParser(description="osbuild ostree update tool")
    parser.add_argument("--build-dir", metavar="DIR", type=os.path.abspath,
                        default="build", dest="builddir",
                        help="temporary directory to store build data")
    parser.add_argument("--config", metavar="FILE", type=os.path.abspath,
                        default="config.ini", dest="config",
                        help="Build configuration")
    parser.set_defaults(cmd=None)
    sp = parser.add_subparsers(help='commands')

    subpar = sp.add_parser("setup", help='Setup for the update')
    subpar.set_defaults(cmd='setup')

    subpar = sp.add_parser("prepare", help='Prepare an update')
    subpar.set_defaults(cmd='prepare')

    subpar = sp.add_parser("finish", help='Pull in an update')
    subpar.set_defaults(cmd='finish')

    subpar = sp.add_parser("serve", help='Serve updates')
    subpar.add_argument('--port', default=8000, type=int)
    subpar.set_defaults(cmd='serve')

    args = parser.parse_args()

    if not args.cmd:
        print(f"{RED}Error{RESET}: Need command\n")
        parser.print_help(sys.stderr)
        return 1

    if args.cmd == "setup":
        r = setup(args)
    elif args.cmd == "prepare":
        r = prepare(args)
    elif args.cmd == "finish":
        r = finish(args)
    elif args.cmd == "serve":
        r = serve(args)
    else:
        r = -1

    return r


if __name__ == "__main__":
    sys.exit(main())
